{"version":3,"sources":["../../../app/models/shuming.js"],"names":["mongoose","require","notify","Schema","ShumingSchema","name","type","String","default","trim","title","insertTime","pre","next","methods","uploadAndSave","image","err","validateSync","toString","Error","save","addComment","user","comment","comments","push","body","_id","email","article","currentUser","removeComment","commentId","index","map","id","indexOf","splice","statics","load","findOne","populate","exec","list","options","criteria","page","limit","find","model"],"mappings":"AAAA;;AAEA;;;;AAIA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,WAAR,CAAf;;AAEA;AACA;AACA;;AAEA,IAAME,SAASH,SAASG,MAAxB;;AAEA;;;;AAIA,IAAMC,gBAAgB,IAAID,MAAJ,CAAW;AAC7BE,UAAM,EAAEC,MAAOC,MAAT,EAAiBC,SAAU,EAA3B,EAA+BC,MAAO,IAAtC,EADuB;AAE7BC,WAAO,EAAEJ,MAAOC,MAAT,EAAiBC,SAAU,EAA3B,EAA+BC,MAAO,IAAtC,EAFsB;AAG7BE,gBAAY,EAAEL,MAAOC,MAAT,EAAiBC,SAAU,EAA3B,EAA+BC,MAAO,IAAtC;AAHiB,CAAX,CAAtB;;AAOA;;;;AAIAL,cAAcQ,GAAd,CAAkB,QAAlB,EAA4B,UAAUC,IAAV,EAAgB;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEAA;AACH,CAVD;;AAYA;;;;AAIAT,cAAcU,OAAd,GAAwB;;AAEpB;;;;;;;AAOAC,mBAAe,uBAAUC,KAAV,EAAiB;AAC5B,YAAMC,MAAM,KAAKC,YAAL,EAAZ;AACA,YAAID,OAAOA,IAAIE,QAAJ,EAAX,EAA2B,MAAM,IAAIC,KAAJ,CAAUH,IAAIE,QAAJ,EAAV,CAAN;AAC3B,eAAO,KAAKE,IAAL,EAAP;;AAEA;;;;;;;;;;;AAYH,KA1BmB;;AA4BpB;;;;;;;;AAQAC,gBAAY,oBAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjC,aAAKC,QAAL,CAAcC,IAAd,CAAmB;AACfC,kBAAMH,QAAQG,IADC;AAEfJ,kBAAMA,KAAKK;AAFI,SAAnB;;AAKA,YAAI,CAAC,KAAKL,IAAL,CAAUM,KAAf,EAAsB,KAAKN,IAAL,CAAUM,KAAV,GAAkB,mBAAlB;;AAEtB3B,eAAOsB,OAAP,CAAe;AACXM,qBAAS,IADE;AAEXC,yBAAaR,IAFF;AAGXC,qBAASA,QAAQG;AAHN,SAAf;;AAMA,eAAO,KAAKN,IAAL,EAAP;AACH,KAnDmB;;AAqDpB;;;;;;;AAOAW,mBAAe,uBAAUC,SAAV,EAAqB;AAChC,YAAMC,QAAQ,KAAKT,QAAL,CACTU,GADS,CACL;AAAA,mBAAWX,QAAQY,EAAnB;AAAA,SADK,EAETC,OAFS,CAEDJ,SAFC,CAAd;;AAIA,YAAI,CAACC,KAAL,EAAY,KAAKT,QAAL,CAAca,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B,EAAZ,KACK,MAAM,IAAId,KAAJ,CAAU,mBAAV,CAAN;AACL,eAAO,KAAKC,IAAL,EAAP;AACH;AApEmB,CAAxB;;AAuEA;;;;AAIAjB,cAAcmC,OAAd,GAAwB;;AAEpB;;;;;;;AAOAC,UAAM,cAAUZ,GAAV,EAAe;AACjB,eAAO,KAAKa,OAAL,CAAa,EAAEb,QAAF,EAAb,EACFc,QADE,CACO,MADP,EACe,qBADf,EAEFA,QAFE,CAEO,eAFP,EAGFC,IAHE,EAAP;AAIH,KAdmB;;AAgBpB;;;;;;;AAOAC,UAAM,cAAUC,OAAV,EAAmB;;AAErB,YAAMC,WAAWD,QAAQC,QAAR,IAAoB,EAArC;AACA,YAAMC,OAAOF,QAAQE,IAAR,IAAgB,CAA7B;AACA,YAAMC,QAAQH,QAAQG,KAAR,IAAiB,EAA/B;;AAEA,eAAO,KAAKC,IAAL;AACH;AACA;AACA;AAHG,SAIFN,IAJE,EAAP;AAKH;AAlCmB,CAAxB;;AAqCA3C,SAASkD,KAAT,CAAe,SAAf,EAA0B9C,aAA1B,EAAyC,SAAzC","file":"shuming.js","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst mongoose = require('mongoose');\nconst notify = require('../mailer');\n\n// const Imager = require('imager');\n// const config = require('../../config');\n// const imagerConfig = require(config.root + '/config/imager.js');\n\nconst Schema = mongoose.Schema;\n\n/**\n * Article Schema\n */\n\nconst ShumingSchema = new Schema({\n    name: { type : String, default : '', trim : true },\n    title: { type : String, default : '', trim : true },\n    insertTime: { type : String, default : '', trim : true }\n});\n\n\n/**\n * Pre-remove hook\n */\n\nShumingSchema.pre('remove', function (next) {\n    // const imager = new Imager(imagerConfig, 'S3');\n    // const files = this.image.files;\n\n    // if there are files associated with the item, remove from the cloud too\n    // imager.remove(files, function (err) {\n    //   if (err) return next(err);\n    // }, 'article');\n\n    next();\n});\n\n/**\n * Methods\n */\n\nShumingSchema.methods = {\n\n    /**\n     * Save article and upload image\n     *\n     * @param {Object} images\n     * @api private\n     */\n\n    uploadAndSave: function (image) {\n        const err = this.validateSync();\n        if (err && err.toString()) throw new Error(err.toString());\n        return this.save();\n\n        /*\n        if (images && !images.length) return this.save();\n        const imager = new Imager(imagerConfig, 'S3');\n\n        imager.upload(images, function (err, cdnUri, files) {\n          if (err) return cb(err);\n          if (files.length) {\n            self.image = { cdnUri : cdnUri, files : files };\n          }\n          self.save(cb);\n        }, 'article');\n        */\n    },\n\n    /**\n     * Add comment\n     *\n     * @param {User} user\n     * @param {Object} comment\n     * @api private\n     */\n\n    addComment: function (user, comment) {\n        this.comments.push({\n            body: comment.body,\n            user: user._id\n        });\n\n        if (!this.user.email) this.user.email = 'email@product.com';\n\n        notify.comment({\n            article: this,\n            currentUser: user,\n            comment: comment.body\n        });\n\n        return this.save();\n    },\n\n    /**\n     * Remove comment\n     *\n     * @param {commentId} String\n     * @api private\n     */\n\n    removeComment: function (commentId) {\n        const index = this.comments\n            .map(comment => comment.id)\n            .indexOf(commentId);\n\n        if (~index) this.comments.splice(index, 1);\n        else throw new Error('Comment not found');\n        return this.save();\n    }\n};\n\n/**\n * Statics\n */\n\nShumingSchema.statics = {\n\n    /**\n     * Find article by id\n     *\n     * @param {ObjectId} id\n     * @api private\n     */\n\n    load: function (_id) {\n        return this.findOne({ _id })\n            .populate('user', 'name email username')\n            .populate('comments.user')\n            .exec();\n    },\n\n    /**\n     * List articles\n     *\n     * @param {Object} options\n     * @api private\n     */\n\n    list: function (options) {\n\n        const criteria = options.criteria || {};\n        const page = options.page || 0;\n        const limit = options.limit || 30;\n\n        return this.find()\n            // .sort({ createdAt: -1 })\n            // .limit(limit)\n            // .skip(limit * page)\n            .exec();\n    }\n};\n\nmongoose.model('Shuming', ShumingSchema, 'shuming');\n"]}